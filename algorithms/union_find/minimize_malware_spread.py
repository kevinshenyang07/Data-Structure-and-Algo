from collections import Counter

# Minimize Malware Spread
class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        if not initial:
            return -1
        # return the smallest index if multiple results
        initial.sort()
        n = len(graph)
        uf = UnionFind(n)
        # union the whole graph
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        # if only one initially infected node, the damage reduced will be the group size
        # => return the infected node in the largest group
        # if 2+ initially infected node in a group, cannot reduce the damage
        # => return the infected node with minimum index
        counter = Counter(uf.find(i) for i in initial)  # group_parent => # of initially infected nodes
        one_infected = [i for i in initial if counter[uf.find(i)] == 1]
        if one_infected:
            return max(one_infected, key=lambda i: uf.sizes[uf.find(i)])
        else:
            return min(initial)
# O(n ^ 2) time, O(n) space
