Notations
-------------------
- hyphen
[] square bracket
<> angle bracket
() parenthesis
{} braces / curly bracket
: colon
; semicolon

a ** b: a to the b / bth power of a / a raised to the power b
a // b: floor division
a % b: a modulo b
c(n, k): combinations of n choose k
arr[i]: array at i

During Interview
===================
最重要的是向考官展现你的思维能力 + 让面试官把握节奏 (let Interviewer drive)
1. 跟考官沟通明确限制条件 (assumptions, edge cases)
2. 提供brute force思路/复杂度，并进一步提供优化后解法思路
3. 代码实现
4. 肉眼检查一遍
5. 分析时间/空间复杂度
6. 询问考官是否需要提供全面的测试用例，并用其中一个过一遍

答题习惯：
1. 异常检测/边界处理，不要在写完以后再加，不是行数越少越好
2. 先把每个情况分别列出并判断，之后再去想怎样合并不同条件
3. 面试时不要过分关注corner case，注意空值检查即可
4. 尽量避免递归，用DFS递归不如用BFS迭代，跟面试官讨论是否是要考你递归
5. 方法、变量名尽量按照规范写，来不及的话向考官解释一下

细节：
1. 判断两个浮点数是否相等时，不应使用 a == b，而是判断两者之差是否小于某个阈值，如1e-9
2. 判断一个整数是否为奇数，应使用 x % 2 != 0，因为x有可能是负数
3. 整数求平均，应使用 a + (b - a) / 2

class Solution(object):
    def my_algo(self, s1):
        """
        :type s1: String
        :rtype: List[int]
        """
        pass

    def test(self):
        test_str = 'test'
        assert self.my_algo(test_str) == ans
        return 0

备注:
1. 有无经验，公司大小对算法问题难度影响不大，重点在于bug free和解题速度
2. 主要考实现不太容易，而不是很难想的算法
3. 会问时间空间复杂度，O(n)经常要求优化到O(logn)
4. 只有 one-liner 可以写在一行

谷歌：
1. 思路大于结果， 正确的思路 + psuedo code > 含糊不清的思路 + 你觉得 work 的 code，他们在意的是你能不能当场好好地把思路解释清楚。
2. 方差很大，我和面试官聊的时候，他们所有人都跟我说谷歌面试luck是很关键的一环，所以放轻松，调整好心态。
3. 不要太相信你的面试官，他们有时候也会 challenge / trick 你来检验你是否对自己的解法足够自信。
4. 面试官一眼就能看出来这题你是不是做过，如果你做过，他会用 unreasonable 的 bar来要求你，或者进行魔幻改编。
   但是如果这题你没做过一步一步develop你的思路，他们是最喜欢的，给的评价也会偏高。
